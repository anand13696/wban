//
// Generated file, do not edit! Created by nedtool 5.4 from WbanPacket.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __WBANPACKET_M_H
#define __WBANPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>WbanPacket.msg:16</tt> by nedtool.
 * <pre>
 * enum WbanPacketType
 * {
 *     WBAN_CONN_REQ = 0;
 *     WBAN_CONN_ACK = 1;
 *     WBAN_DISC_REQ = 2;
 *     WBAN_DISC_ACK = 3;
 *     WBAN_DATA = 4;
 * }
 * </pre>
 */
enum WbanPacketType {
    WBAN_CONN_REQ = 0,
    WBAN_CONN_ACK = 1,
    WBAN_DISC_REQ = 2,
    WBAN_DISC_ACK = 3,
    WBAN_DATA = 4
};

/**
 * Struct generated from WbanPacket.msg:24 by nedtool.
 */
struct sensorLocation
{
    sensorLocation();
    double x;
    double y;
    double energy;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const sensorLocation& a);
void __doUnpacking(omnetpp::cCommBuffer *b, sensorLocation& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const sensorLocation& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, sensorLocation& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>WbanPacket.msg:30</tt> by nedtool.
 * <pre>
 * packet WbanPacket
 * {
 *     int srcAddress;
 *     int destAddress;
 *     int priority;
 *     int serverProcId;
 * }
 * </pre>
 */
class WbanPacket : public ::omnetpp::cPacket
{
  protected:
    int srcAddress;
    int destAddress;
    int priority;
    int serverProcId;

  private:
    void copy(const WbanPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WbanPacket&);

  public:
    WbanPacket(const char *name=nullptr, short kind=0);
    WbanPacket(const WbanPacket& other);
    virtual ~WbanPacket();
    WbanPacket& operator=(const WbanPacket& other);
    virtual WbanPacket *dup() const override {return new WbanPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSrcAddress() const;
    virtual void setSrcAddress(int srcAddress);
    virtual int getDestAddress() const;
    virtual void setDestAddress(int destAddress);
    virtual int getPriority() const;
    virtual void setPriority(int priority);
    virtual int getServerProcId() const;
    virtual void setServerProcId(int serverProcId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WbanPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WbanPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>WbanPacket.msg:37</tt> by nedtool.
 * <pre>
 * packet WbanDataPacket extends WbanPacket
 * {
 *     string payLoad;
 * }
 * </pre>
 */
class WbanDataPacket : public ::WbanPacket
{
  protected:
    ::omnetpp::opp_string payLoad;

  private:
    void copy(const WbanDataPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WbanDataPacket&);

  public:
    WbanDataPacket(const char *name=nullptr, short kind=0);
    WbanDataPacket(const WbanDataPacket& other);
    virtual ~WbanDataPacket();
    WbanDataPacket& operator=(const WbanDataPacket& other);
    virtual WbanDataPacket *dup() const override {return new WbanDataPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getPayLoad() const;
    virtual void setPayLoad(const char * payLoad);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WbanDataPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WbanDataPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __WBANPACKET_M_H

